diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index c0a7c149c4d..29dce13ced4 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -9272,7 +9272,7 @@ os_setpgrp_impl(PyObject *module)
 
 #ifdef MS_WINDOWS
 #include <winternl.h>
-#include <ProcessSnapshot.h>
+#include <tlhelp32.h>
 
 // The structure definition in winternl.h may be incomplete.
 // This structure is the full version from the MSDN documentation.
@@ -9350,35 +9350,38 @@ win32_getppid_fast(void)
 static PyObject*
 win32_getppid(void)
 {
-    DWORD error;
+    HANDLE snapshot;
+    pid_t mypid;
     PyObject* result = NULL;
-    HANDLE process = GetCurrentProcess();
-    HPSS snapshot = NULL;
-    ULONG pid;
+    BOOL have_record;
+    PROCESSENTRY32 pe;
 
-    pid = win32_getppid_fast();
-    if (pid != 0) {
-        return PyLong_FromUnsignedLong(pid);
-    }
+    mypid = getpid(); /* This function never fails */
 
-    // If failure occurs in win32_getppid_fast(), fall back to using the PSS API.
+    snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
+    if (snapshot == INVALID_HANDLE_VALUE)
+        return PyErr_SetFromWindowsErr(GetLastError());
 
-    error = PssCaptureSnapshot(process, PSS_CAPTURE_NONE, 0, &snapshot);
-    if (error != ERROR_SUCCESS) {
-        return PyErr_SetFromWindowsErr(error);
-    }
+    pe.dwSize = sizeof(pe);
+    have_record = Process32First(snapshot, &pe);
+    while (have_record) {
+        if (mypid == (pid_t)pe.th32ProcessID) {
+            /* We could cache the ulong value in a static variable. */
+            result = PyLong_FromPid((pid_t)pe.th32ParentProcessID);
+            break;
+        }
 
-    PSS_PROCESS_INFORMATION info;
-    error = PssQuerySnapshot(snapshot, PSS_QUERY_PROCESS_INFORMATION, &info,
-                             sizeof(info));
-    if (error == ERROR_SUCCESS) {
-        result = PyLong_FromUnsignedLong(info.ParentProcessId);
-    }
-    else {
-        result = PyErr_SetFromWindowsErr(error);
-    }
+        have_record = Process32Next(snapshot, &pe);
+     }
+
+    /* If our loop exits and our pid was not found (result will be NULL)
+     * then GetLastError will return ERROR_NO_MORE_FILES. This is an
+     * error anyway, so let's raise it. */
+    if (!result)
+        result = PyErr_SetFromWindowsErr(GetLastError());
+
+    CloseHandle(snapshot);
 
-    PssFreeSnapshot(process, snapshot);
     return result;
 }
 #endif /*MS_WINDOWS*/
